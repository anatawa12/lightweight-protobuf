/*
 * Generated by lists-generator.kts
 */

package com.anatawa12.protobuf;

import java.lang.reflect.Array;
import java.util.AbstractList;
import java.util.Arrays;
import java.util.Collection;
import java.util.ConcurrentModificationException;
import java.util.List;
import java.util.NoSuchElementException;
import java.util.Objects;
import java.util.PrimitiveIterator;
import java.util.RandomAccess;
import java.util.function.LongUnaryOperator;

public class LongList extends AbstractList<Long> implements List<Long>, RandomAccess {
    protected int size;
    protected long[] backed;

    public LongList() {
        this(10, 1);
    }

    public LongList(int capacity) {
        this(capacity == 0 ? 1 : capacity, 0);
    }

    public LongList(LongList from) {
        this(from.size());
        addAll(from);
    }

    // internal: in this constructor, empty backed array is allowed 
    // but it may cause infinity loop or index out of exeption on adding value.
    LongList(int capacity, int marker) {
        this.backed = new long[capacity];
    }

    // Query Operations

    @Override
    public final int size() {
        return size;
    }

    @Override
    public final boolean isEmpty() {
        return size == 0;
    }

    public final boolean contains(long element) {
        for (long value : backed) {
            if (value == element)
                return true;
        }
        return false;
    }

    /**
     * You should use {@link LongList#contains(long)}
     */
    @Deprecated
    @Override
    public final boolean contains(Object o) {
        if (!(o instanceof Long)) return false;
        return contains((long)o);
    }

    @Override
    public final PrimitiveIterator.OfLong iterator() {
        return new ListIterator(0);
    }

    @Override
    public final Object[] toArray() {
        return toArray(new Object[0]);
    }

    @SuppressWarnings("unchecked")
    @Override
    public final <T> T[] toArray(T[] a) {
        // create new array if size is not enough
        if (a.length < size) a = (T[]) Array.newInstance(a.getClass().getComponentType(), size);
        for (int i = 0; i < size; i++) {
            a[i] = (T)(Long)backed[i];
        }
        return a;
    }

    public final long[] toLongArray() {
        return Arrays.copyOf(backed, size);
    }

    // Modification Operations

    public boolean add(long value) {
        add(size(), value);
        return true;
    }

    /**
     * You should use {@link LongList#add(long)}
     */
    @Deprecated
    @Override
    public final boolean add(Long boxed) {
        return add((long)boxed);
    }

    /**
     * You should use {@link LongList#removeLong(long)}
     */
    @Deprecated
    @Override
    public final boolean remove(Object o) {
        if (!(o instanceof Long))
            return false;
        return removeLong((long)o);
    }

    public boolean removeLong(long value) {
        int i = indexOf(value);
        if (i < 0) return false;
        removeAt(i);
        return true;
    }

    // Bulk Modification Operations

    @Override
    public final boolean containsAll(Collection<?> c) {
        java.util.Iterator<?> iter = c.iterator();
        if (iter instanceof PrimitiveIterator.OfLong) {
            PrimitiveIterator.OfLong ofLong = (PrimitiveIterator.OfLong) iter;
            while (ofLong.hasNext())
                if (!contains(ofLong.nextLong()))
                    return false;
        } else {
            while (iter.hasNext())
                if (!contains(iter.next()))
                    return false;
        }
        return true;
    }

    public boolean addAll(long[] c) {
        return addAll(size, c, c.length);
    }

    public boolean addAll(int index, long[] c) {
        return addAll(index, c, c.length);
    }

    @Override
    public boolean addAll(Collection<? extends Long> c) {
        if (c == this) throw new IllegalArgumentException("can't addAll this itself");
        if (c instanceof LongList)
            addAll(size, ((LongList) c).backed, ((LongList) c).size);
        return addAll(size, toPrimitives(c));
    }

    @Override
    public boolean addAll(int index, Collection<? extends Long> c) {
        if (c == this) throw new IllegalArgumentException("can't addAll this itself");
        if (c instanceof LongList)
            addAll(index, ((LongList) c).backed, ((LongList) c).size);
        return addAll(index, toPrimitives(c));
    }

    private boolean addAll(int index, long[] c, int addSize) {
        rangeCheckForAdd(index);
        modCount++;
        if (size == 0) return false;
        long[] ary;
        if (backed.length < size + addSize) {
            int newSize = backed.length * 2;
            while (newSize < size + addSize) newSize *= 2;
            ary = new long[newSize];
            // copy 0..<index
            System.arraycopy(backed, 0,
                    ary, 0, index);
            backed = ary;
        } else {
            ary = backed;
            // no resize
        }
        // copy index..<size to index+addSize..<size+addSize
        System.arraycopy(backed, index,
                ary, index + addSize, size - index);
        // copy 0..<addSize to index..<index+addSize
        System.arraycopy(c, 0,
                ary, index, addSize);
        size += addSize;
        return true;
    }

    @Override
    public boolean removeAll(Collection<?> c) {
        return batchRemove(c, true);
    }

    @Override
    public boolean retainAll(Collection<?> c) {
        return batchRemove(c, false);
    }

    private boolean batchRemove(Collection<?> c, boolean complement) {
        final long[] data = this.backed;
        int r = 0;
        int w = 0;
        boolean modified = false;
        try {
            if (c instanceof LongList) {
                LongList intList = (LongList) c;
                for (; r < size; r++)
                    if (intList.contains(data[r]) == complement)
                        data[w++] = data[r];
            } else {
                for (; r < size; r++)
                    if (c.contains(data[r]) == complement)
                        data[w++] = data[r];
            }
        } finally {
            // Preserve behavioral compatibility with AbstractCollection,
            // even if c.contains() throws.
            if (r != size) {
                System.arraycopy(data, r,
                        data, w,
                        size - r);
                w += size - r;
            }
            if (w != size) {
                size = w;
                modified = true;
            }
        }
        return modified;
    }

    public final void replaceAll(LongUnaryOperator operator) {
        Objects.requireNonNull(operator);
        final ListIterator li = this.listIterator();
        while (li.hasNext()) {
            li.set(operator.applyAsLong(li.nextLong()));
        }
    }

    @Override
    public void clear() {
        size = 0;
    }

    public final boolean equals(Object o) {
        if (o == this) return true;
        if (!(o instanceof List<?>)) return false;
        if (o instanceof LongList) {
            if (((LongList) o).size != size) return false;

            ListIterator e1 = listIterator();
            ListIterator e2 = ((LongList) o).listIterator();
            while (e1.hasNext() && e2.hasNext()) {
                if (e1.nextLong() != e2.nextLong())
                    return false;
            }
            return !(e1.hasNext() || e2.hasNext());
        }

        ListIterator e1 = listIterator();
        java.util.ListIterator<?> e2 = ((List<?>) o).listIterator();
        while (e1.hasNext() && e2.hasNext()) {
            long o1 = e1.nextLong();
            Object o2 = e2.next();
            if (!eq(o1, o2))
                return false;
        }
        return !(e1.hasNext() || e2.hasNext());
    }

    @Override
    public final int hashCode() {
        int hashCode = 1;
        final ListIterator li = this.listIterator();
        while (li.hasNext())
            hashCode = 31 * hashCode + Long.hashCode(li.nextLong());
        return hashCode;
    }

    // Positional Access Operations

    public final long getLong(int index) {
        rangeCheck(index);
        return backed[index];
    }

    /**
     * You should use {@link LongList#getLong getLong}
     */
    @Deprecated
    @Override
    public final Long get(int index) {
        return getLong(index);
    }

    public long set(int index, long element) {
        rangeCheck(index);
        long r = backed[index];
        backed[index] = element;
        return r;
    }

    /**
     * You should use {@link LongList#set(int, long)}
     */
    @Deprecated
    @Override
    public final Long set(int index, Long element) {
        return set(index, (long)element);
    }

    public void add(int index, long value) {
        rangeCheckForAdd(index);
        modCount++;
        long[] ary;
        if (backed.length < size + 1) {
            ary = new long[backed.length * 2];
            // copy 0..<index
            System.arraycopy(backed, 0,
                    ary, 0, index);
            backed = ary;
        } else {
            ary = backed;
            // no resize
        }
        // copy index..<size to index+1..<size+1
        System.arraycopy(backed, index,
                ary, index + 1, size - index);
        ary[index] = value;
        size++;
    }

    /**
     * You should use {@link LongList#add(int, long)}
     */
    @Deprecated
    @Override
    public void add(int index, Long element) {
        add(index, (long)element);
    }

    public long removeAt(int index) {
        rangeCheck(index);
        modCount++;
        long r = backed[index];
        // copy index+1..<size to index..<size-1
        System.arraycopy(backed, index + 1,
                backed, index, size - index - 1);
        size--;
        return r;
    }

    /**
     * You should use {@link LongList#removeAt removeAt}
     */
    @Deprecated
    @Override
    public Long remove(int index) {
        return removeAt(index);
    }

    /**
     * You should use {@link LongList#indexOf(long)}
     */
    @Override
    public final int indexOf(Object o) {
        if (!(o instanceof Long)) return -1;
        return indexOf((long)o);
    }

    public final int indexOf(long value) {
        for (int i = 0; i < size; i++) {
            if (value == backed[i]) return i;
        }
        return -1;
    }

    /**
     * You should use {@link LongList#lastIndexOf(long)}
     */
    @Override
    public final int lastIndexOf(Object o) {
        if (!(o instanceof Long)) return -1;
        return indexOf((long)o);
    }

    public final int lastIndexOf(long value) {
        for (int i = size - 1; i >= 0; i--) {
            if (value == backed[i]) return i;
        }
        return -1;
    }

    // List Iterators

    @Override
    public final ListIterator listIterator() {
        return new ListIterator(0);
    }

    @Override
    public final ListIterator listIterator(int index) {
        rangeCheckForAdd(index);
        return new ListIterator(index);
    }

    public final class ListIterator implements PrimitiveIterator.OfLong, java.util.ListIterator<Long> {
        int expectedModCount = modCount;
        int lastRet = -1;
        int cursor;

        public ListIterator(int cursor) {
            this.cursor = cursor;
        }

        @Override
        public boolean hasNext() {
            return cursor < size;
        }

        @Override
        public long nextLong() {
            try {
                checkForComodification();
                int i = cursor;
                long next = getLong(i);
                lastRet = i;
                cursor = i + 1;
                return next;
            } catch (IndexOutOfBoundsException e) {
                checkForComodification();
                throw new NoSuchElementException();
            }
        }

        @Override
        public Long next() {
            return PrimitiveIterator.OfLong.super.next();
        }

        public void remove() {
            if (lastRet < 0)
                throw new IllegalStateException();
            checkForComodification();

            try {
                LongList.this.removeAt(lastRet);
                if (lastRet < cursor)
                    cursor--;
                lastRet = -1;
                expectedModCount = modCount;
            } catch (IndexOutOfBoundsException e) {
                throw new ConcurrentModificationException();
            }
        }

        public boolean hasPrevious() {
            return cursor != 0;
        }

        public long previousLong() {
            checkForComodification();
            try {
                int i = cursor - 1;
                long previous = getLong(i);
                lastRet = cursor = i;
                return previous;
            } catch (IndexOutOfBoundsException e) {
                checkForComodification();
                throw new NoSuchElementException();
            }
        }

        public int nextIndex() {
            return cursor;
        }

        public int previousIndex() {
            return cursor-1;
        }

        public void set(long e) {
            if (lastRet < 0)
                throw new IllegalStateException();
            checkForComodification();

            try {
                LongList.this.set(lastRet, e);
                expectedModCount = modCount;
            } catch (IndexOutOfBoundsException ex) {
                throw new ConcurrentModificationException();
            }
        }

        public void add(long e) {
            checkForComodification();

            try {
                int i = cursor;
                LongList.this.add(i, e);
                lastRet = -1;
                cursor = i + 1;
                expectedModCount = modCount;
            } catch (IndexOutOfBoundsException ex) {
                throw new ConcurrentModificationException();
            }
        }

        public void set(Long e) {
            set((long)e);
        }
        public void add(Long e) {
            add((long)e);
        }

        public Long previous() {
            return previousLong();
        }

        private void checkForComodification() {
            if (modCount != expectedModCount)
                throw new ConcurrentModificationException();
        }
    }

    //////////////////////

    private long[] toPrimitives(Collection<? extends Long> c) {
        Long[] wrapper = c.toArray(EMPTY_WRAPPER_ARRAY);
        if (wrapper.length == 0) return EMPTY_PRIMITIVE_ARRAY;
        long[] primitives = new long[wrapper.length];
        for (int i = 0; i < primitives.length; i++) {
            primitives[i] = wrapper[i];
        }
        return primitives;
    }

    private void rangeCheck(int index) {
        if (index < 0 || index >= size())
            throw new IndexOutOfBoundsException(outOfBoundsMsg(index));
    }

    private void rangeCheckForAdd(int index) {
        if (index < 0 || index > size())
            throw new IndexOutOfBoundsException(outOfBoundsMsg(index));
    }

    private String outOfBoundsMsg(int index) {
        return "Index: "+index+", Size: "+size();
    }

    private boolean eq(long o1, Object o2) {
        return o2 instanceof Long && o1 == (long)o2;
    }

    private static final Long[] EMPTY_WRAPPER_ARRAY = new Long[0];
    private static final long[] EMPTY_PRIMITIVE_ARRAY = new long[0];
}
